service: () -> {
    createAccount: () -> (variant {Ok:record {owner:principal; transferRequests:vec text; transactions:vec record {id:text; to:opt principal; transactionType:variant {approvedRequests:text; transfer:text}; from:opt principal; amount:nat; spender:opt principal}}; Err:variant {InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}});
    createTransferRequest: (record {amount:nat; receiver:principal}) -> (variant {Ok:record {id:text; requester:principal; approved:opt bool; amount:nat; receiver:principal; transactionId:opt text}; Err:variant {InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}});
    getAccount: () -> (variant {Ok:record {owner:principal; transferRequests:vec text; transactions:vec record {id:text; to:opt principal; transactionType:variant {approvedRequests:text; transfer:text}; from:opt principal; amount:nat; spender:opt principal}}; Err:variant {InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}}) query;
    getAddressFromPrincipal: (principal) -> (text) query;
    getCanisterId: () -> (principal) query;
    getRequest: (text) -> (variant {Ok:record {id:text; requester:principal; approved:opt bool; amount:nat; receiver:principal; transactionId:opt text}; Err:variant {InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}}) query;
    handleTransferRequest: (text, bool) -> (variant {Ok:record {id:text; requester:principal; approved:opt bool; amount:nat; receiver:principal; transactionId:opt text}; Err:variant {InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}});
    isRegistered: (principal) -> (bool) query;
    transferFrom: (record {to:record {owner:principal; subaccount:opt vec nat8}; fee:opt nat; from:record {owner:principal; subaccount:opt vec nat8}; memo:opt vec nat8; created_at_time:opt nat64; amount:nat}) -> (variant {Ok:record {owner:principal; transferRequests:vec text; transactions:vec record {id:text; to:opt principal; transactionType:variant {approvedRequests:text; transfer:text}; from:opt principal; amount:nat; spender:opt principal}}; Err:variant {InvalidPayload:text; ApproveRequestFailed:text; AlreadyRegistered:text; NotFound:text; TransferFromFailed:text; NotOwner:text}});
}
